x-profiles-olap: &profiles-olap
    profiles:
        - default
        - olap

x-profiles-oltp: &profiles-oltp
    profiles:
        - default
        - api
        - oltp

x-profiles-nosql: &profiles-nosql
    profiles:
        - default
        - api
        - nosql

x-profiles-api: &profiles-api
    profiles:
        - default
        - api

x-base-service: &base-service
    platform: ${DOCKER_IMG_PLATFORM:-linux/amd64}
    profiles:
        - default

x-default-service: &default-service
    <<: *base-service
    env_file: .env
    entrypoint: "bash -c"
    command: "exit 0"

x-common-healthcheck: &common-healthcheck
    interval: 5s
    timeout: 5s
    retries: 10

x-clickhouse-default-node: &clickhouse-default-node
    <<: *base-service
    image: clickhouse-default-node
    env_file: .env

x-clickhouse-default-node-with-keeper: &clickhouse-default-node-with-keeper
    <<: *clickhouse-default-node
    image: clickhouse-default-node-with-keeper

x-kafka-default-broker: &kafka-default-broker
    <<: [*profiles-oltp, *base-service]
    build:
        context: .
        dockerfile: ./docker/kafka/broker/Dockerfile
        args:
            - IMG=${KAFKA_BROKER_IMG}
    env_file: .env
    environment:
      &kafka-default-broker-env
        KAFKA_ENABLE_KRAFT: yes
        KAFKA_CFG_PROCESS_ROLES: broker,controller
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
        KAFKA_CFG_LISTENERS: CONTROLLER://:${KAFKA_BROKER_CONTROLLER_PORT},CLIENT://:${KAFKA_BROKER_CLIENT_PORT},EXTERNAL://:${KAFKA_BROKER_EXTERNAL_PORT}
        KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
        ALLOW_PLAINTEXT_LISTENER: yes

x-mongo-default-service: &mongo-default-service
    <<: [*profiles-nosql, *base-service]
    env_file: .env
    build:
        context: .
        dockerfile: ./docker/mongo/Dockerfile
        args:
            - ENV=${ENVIRONMENT}
            - IMG=${MONGO_IMG}


services:
    # =======================================
    # Default python service
    # =======================================
    python-src:
        <<: *default-service
        build:
            context: .
            dockerfile: ./docker/python/Dockerfile
            args:
                env: ${ENVIRONMENT}
                img: ${PYTHON_IMG}
        image: python-src

    # =======================================
    # app
    # =======================================
    app:
        <<: [*profiles-api, *base-service]
        env_file: .env
        build:
            context: .
            dockerfile: ./docker/app/Dockerfile
            args:
                env: ${ENVIRONMENT}
        depends_on:
            kafka-initer:
                condition: service_completed_successfully
            mongo-initer:
                condition: service_completed_successfully

    # =======================================
    # ClickHouse
    # =======================================
    clickhouse-initer:
        <<: [ *profiles-olap, *base-service ]
        env_file: .env
        build:
            context: .
            dockerfile: ./docker/clickhouse/initer/Dockerfile
        environment:
            CH_NODE_HOST: clickhouse-shard1
            CH_NODE_PORT: ${CH_NODE_PORT}
        depends_on:
            clickhouse-shard1:
                condition: service_healthy
            clickhouse-shard1-replica1:
                condition: service_healthy
            clickhouse-shard2:
                condition: service_healthy
            clickhouse-shard2-replica1:
                condition: service_healthy
            clickhouse-keeper-quorum:
                condition: service_healthy

    clickhouse-default-node:
        <<: [*profiles-olap, *default-service]
        build:
            context: .
            dockerfile: ./docker/clickhouse/node.Dockerfile
            args:
                - IMG=${CH_SERVER_IMG}
        image: clickhouse-default-node
        volumes:
            - clickhouse_default_node_data:/var/lib/clickhouse

    clickhouse-default-node-with-keeper:
        <<: [*profiles-olap, *default-service]
        build:
            context: .
            dockerfile: ./docker/clickhouse/node-keeper.Dockerfile
            args:
                - IMG=${CH_SERVER_IMG}
        image: clickhouse-default-node-with-keeper
        volumes:
            - clickhouse_default_node_with_keeper_data:/var/lib/clickhouse

    clickhouse-shard1:
        <<: [*profiles-olap, *clickhouse-default-node-with-keeper]
        environment:
            CH_NODE_HOST_NAME: clickhouse-shard1
            CH_NODE_SHARD_ID: 1
            CH_NODE_REPLICA_NAME: clickhouse-shard1
            CH_KEEPER_SERVER_ID: 1
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "clickhouse-shard1:${CH_NODE_PORT}" ]
            <<: *common-healthcheck

    clickhouse-shard1-replica1:
        <<: [*profiles-olap, *clickhouse-default-node]
        environment:
            CH_NODE_HOST_NAME: clickhouse-shard1-replica1
            CH_NODE_SHARD_ID: 1
            CH_NODE_REPLICA_NAME: clickhouse-shard1-replica1
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "clickhouse-shard1-replica1:${CH_NODE_PORT}" ]
            <<: *common-healthcheck
        depends_on:
            clickhouse-keeper-quorum:
                condition: service_healthy
            clickhouse-shard1:
                condition: service_healthy

    clickhouse-shard2:
        <<: [*profiles-olap, *clickhouse-default-node-with-keeper]
        environment:
            CH_NODE_HOST_NAME: clickhouse-shard2
            CH_NODE_SHARD_ID: 2
            CH_NODE_REPLICA_NAME: clickhouse-shard2
            CH_KEEPER_SERVER_ID: 2
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "clickhouse-shard2:${CH_NODE_PORT}" ]
            <<: *common-healthcheck

    clickhouse-shard2-replica1:
        <<: [*profiles-olap, *clickhouse-default-node]
        environment:
            CH_NODE_HOST_NAME: clickhouse-shard2-replica1
            CH_NODE_SHARD_ID: 2
            CH_NODE_REPLICA_NAME: clickhouse-shard2-replica1
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "clickhouse-shard2-replica1:${CH_NODE_PORT}" ]
            <<: *common-healthcheck
        depends_on:
            clickhouse-keeper-quorum:
                condition: service_healthy
            clickhouse-shard2:
                condition: service_healthy

    clickhouse-keeper-quorum:
        <<: [*profiles-olap, *clickhouse-default-node-with-keeper]
        environment:
            CH_NODE_HOST_NAME: clickhouse-keeper-quorum
            CH_NODE_SHARD_ID: 0
            CH_NODE_REPLICA_NAME: clickhouse-keeper-quorum
            CH_KEEPER_SERVER_ID: 3
        volumes:
            - clickhouse_keeper_quorum_data:/var/lib/clickhouse
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "clickhouse-keeper-quorum:${CH_NODE_PORT}" ]
            <<: *common-healthcheck
        depends_on:
            - clickhouse-shard1
            - clickhouse-shard2


    # =======================================
    # Kafka
    # =======================================
    kafka-initer:
        <<: [*profiles-oltp, *base-service]
        env_file: .env
        build:
            context: .
            dockerfile: ./docker/kafka/initer/Dockerfile
        depends_on:
            kafka-broker:
                condition: service_healthy
            kafka-schema-registry:
                condition: service_healthy

    kafka-broker:
        <<: *kafka-default-broker
        environment:
            <<: *kafka-default-broker-env
            KAFKA_BROKER_HOST: kafka-broker
            KAFKA_CFG_BROKER_ID: 1
            KAFKA_CFG_NODE_ID: 1
            KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka-broker:${KAFKA_BROKER_CLIENT_PORT},EXTERNAL://localhost:${KAFKA_BROKER_EXTERNAL_PORT}
            KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-broker:${KAFKA_BROKER_CONTROLLER_PORT}
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "kafka-broker:${KAFKA_BROKER_CLIENT_PORT}" ]
            <<: *common-healthcheck

    kafka-schema-registry:
        <<: [*profiles-oltp, *base-service]
        build:
            context: .
            dockerfile: ./docker/kafka/schema_registry/Dockerfile
            args:
                - IMG=${KAFKA_SCHEMA_REGISTRY_IMG}
        environment:
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${KAFKA_SCHEMA_REGISTRY_PORT}
            SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_CLIENT_PORT}
        depends_on:
            kafka-broker:
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "kafka-schema-registry:${KAFKA_SCHEMA_REGISTRY_PORT}" ]
            <<: *common-healthcheck

    kafka-ui:
        <<: [*profiles-oltp, *base-service]
        image: ${KAFKA_UI_IMG}
        environment:
            KAFKA_CLUSTERS_0_NAME: kraft
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker:${KAFKA_BROKER_CLIENT_PORT}
            KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://kafka-schema-registry:${KAFKA_SCHEMA_REGISTRY_PORT}
        depends_on:
            kafka-broker:
                condition: service_healthy


    # =======================================
    # Mongo
    # =======================================

    # ---------------------------------------
    # Mongo: Initer
    mongo-initer:
        <<: [*profiles-nosql, *base-service]
        env_file: .env
        build:
            context: .
            dockerfile: ./docker/mongo/initer/Dockerfile
        depends_on:
            mongo-configsvr01:
                condition: service_healthy

    # ---------------------------------------
    # Mongo: Router
    mongo-router01:
        <<: *mongo-default-service
        command: mongos --port 27017 --configdb rs-config-server/mongo-configsvr01:27017 --bind_ip_all
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-router01:27017" ]
            <<: *common-healthcheck
        depends_on:
            mongo-configsvr01:
                condition: service_healthy

    # ---------------------------------------
    # Mongo: Config Servers
    mongo-configsvr01:
        <<: *mongo-default-service
        command: mongod --port 27017 --configsvr --replSet rs-config-server
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-configsvr01:27017" ]
            <<: *common-healthcheck
        depends_on:
            mongo-shard01-a:
                condition: service_healthy
            mongo-shard02-a:
                condition: service_healthy

    # ---------------------------------------
    # Mongo: Shards

    ## --------------------------------------
    ## Mongo shards: Shard #01
    mongo-shard01-a:
        <<: *mongo-default-service
        command: mongod --port 27017 --shardsvr --replSet rs-shard-01
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-shard01-a:27017" ]
            <<: *common-healthcheck
        depends_on:
            mongo-shard01-b:
                condition: service_healthy
            mongo-shard01-c:
                condition: service_healthy
    mongo-shard01-b:
        <<: *mongo-default-service
        command: mongod --port 27017 --shardsvr --replSet rs-shard-01
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-shard01-b:27017" ]
            <<: *common-healthcheck
    mongo-shard01-c:
        <<: *mongo-default-service
        command: mongod --port 27017 --shardsvr --replSet rs-shard-01
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-shard01-c:27017" ]
            <<: *common-healthcheck

    ## --------------------------------------
    ## Mongo shards: Shard #02
    mongo-shard02-a:
        <<: *mongo-default-service
        command: mongod --port 27017 --shardsvr --replSet rs-shard-02
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-shard02-a:27017" ]
            <<: *common-healthcheck
        depends_on:
            mongo-shard02-b:
                condition: service_healthy
            mongo-shard02-c:
                condition: service_healthy
    mongo-shard02-b:
        <<: *mongo-default-service
        command: mongod --port 27017 --shardsvr --replSet rs-shard-02
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-shard02-b:27017" ]
            <<: *common-healthcheck
    mongo-shard02-c:
        <<: *mongo-default-service
        command: mongod --port 27017 --shardsvr --replSet rs-shard-02
        healthcheck:
            test: [ "CMD", "/scripts/wait-for-it.sh", "mongo-shard02-c:27017" ]
            <<: *common-healthcheck


volumes:
    clickhouse_default_node_data:
    clickhouse_default_node_with_keeper_data:
    clickhouse_keeper_quorum_data:
    clickhouse_initer_data:
